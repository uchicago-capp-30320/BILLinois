{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BILLinois Documentation","text":"<p>To view these docs in the local server, run <code>mkdocs serve localhost:8080</code></p> <p>To deploy to GitHub pages, run <code>mkdocs gh-deploy</code></p>"},{"location":"#directory-structure","title":"Directory structure","text":"<p>For new contributors to get familiarized with the repository.</p> <pre><code>+---apps # main app scripts\n\u2592   +---accounts # django accounts and permissions\n\u2592   \u2592   +---migrations # django databases\n\u2592   +---core # django app, including models and views\n\u2592   \u2592   +---migrations # django databases\n+---config # setup and read in .env\n+---docs # documentation on API, databases, and architecture\n\u2592   +---endpoints # API endpoint documentation\n+---project # to remove\n\u2592   +---data # move to top level directory\n\u2592   \u2592   +---samples # test data for development\n\u2592   +---frontend # move to templates\n+---static # non-variable frontend files (CSS, images)\n\u2592   +---css\n\u2592   +---root\n\u2592       +---robots.txt # defines policies for web scrapers\n+---templates # HTML pages\n\u2592   +---account\n\u2592       +---email # emails sent to users\n\u2592       +---messages # popups ?\n\u2592       +---snippets # partial pages\n+---tests # scripts to test app\n+---_logs # output related to debugging\n.pre-commit-config.yaml # automated hooks such as linting and formatting\n.env # (local-only!) passwords\nmanage.py # runs django server\npyproject.toml # uv dependencies and requirements\nmkdocs.yml # configurations for documentation generator\nREADME.md\nLICENSE.md\nJustfile\n</code></pre>"},{"location":"01-architecture/","title":"Architecture","text":"<p>Start here for an overview of the applications we use to support BILLinois.</p>"},{"location":"01-architecture/#backend-architecture","title":"Backend architecture","text":"<ul> <li>Data source: OpenStates API</li> <li>OpenStates is a standardized data model for legislation from all 50 states.</li> <li>Database: PostgreSQL</li> <li>Postgres can be less expensive than alternatives like AWS for our use case.</li> <li>Backend: Django</li> <li>Django uses the model-view-controller paradigm, which helps for moderately complicated variable views.</li> <li>Authentication: Django</li> <li>Django has built-in flows for authentication</li> <li>Frontend: Bulma</li> <li>We use a CSS framework to simplify and standardize design.</li> <li>Scheduling: cron (a builtin Linux feature)</li> <li>Runs scripts once a day to:<ul> <li>Ingest updates to legislation from the API</li> <li>Notify users of any updates to their saved bills</li> </ul> </li> </ul>"},{"location":"01-architecture/#user-flow","title":"User flow","text":"<p>Overview of the user experience supported by the application architecture, for reference.</p> <p>Users can search and filter bills as either an authenticated user or a guest, but users must be logged in to get notifications for bills.</p> <p></p>"},{"location":"02-django-setup/","title":"Getting Set Up With Django","text":""},{"location":"02-django-setup/#create-an-env-file-to-put-django-in-debug-mode","title":"Create an env file to put Django in debug mode","text":"<p>In the parent directory of the django project, create a .env file. Make sure that it gets picked up by .gitignore!</p> <p>Contact the backend team for the text of this .env file, which includes database authentication credentials.</p> <p>You'll see that what they give you contains this line:</p> <pre><code>DEBUG=True\nALLOWED_HOSTS=127.0.0.1,localhost\n</code></pre> <p>When we're ready to launch our production-level product, we will turn DEBUG off. This is for development purposes.</p> <p>When Django starts, it checks for an .env file and sets its configuration based on the variables set in the .env file.</p>"},{"location":"02-django-setup/#create-the-_logs-folder","title":"Create the _logs folder","text":"<p>You will also need to create an empty _logs folder in the parent directory of the project, and a flat file within that:</p> <pre><code>mkdir _logs\ntouch _logs/flat.log\n</code></pre>"},{"location":"02-django-setup/#launch-django","title":"Launch Django:","text":"<p>Once you have saved your .env file and created the logs folder, you should be able to launch Django with:</p> <p><code>uv run python manage.py runserver</code></p> <p>You should get a message that says something like this:</p> <pre><code>Performing system checks...\n\nSystem check identified no issues (0 silenced).\nApril 25, 2025 - 22:01:41\nDjango version 5.2, using settings 'config.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>If you put in http://127.0.0.1:8000/, or the location the message on your terminal gives you into your web browser, you will be able to access the site.</p>"},{"location":"03-schema-updates/","title":"Updating Django Models and Database Schema","text":"<p>BILLinois uses Django's built in migration system to make updates to the database schema.</p> <p>In order to update the database schema:</p> <p>Go to <code>apps/core/models.py</code>, and create or edit the appropriate model. Each class is a table, while each variable declared within that class is a field. Read the Django documentation on models for more information.</p> <ol> <li>Edit The Models File</li> </ol> <pre><code>class actions_mock_django(models.Model):\n    \"\"\"\n    A mock model for the actions table.\n    Meant to store mock data for actions taken on legislation.\n    \"\"\"\n    bill_id = models.ForeignKey(\"bills_mock_django\", on_delete=models.CASCADE)\n    action_id = models.CharField(unique=True, primary_key=True)\n    description = models.CharField()\n    date = models.DateTimeField()\n\n    class Meta:\n        db_table = 'actions_mock_django'\n</code></pre> <ol> <li>Generate a Migration</li> </ol> <p>Use the <code>makemigrations</code> command to generate a migration file. This will make a new migration file in the <code>apps/core/migrations</code> directory.</p> <p><code>uv run python manage.py makemigrations core</code></p> <ol> <li>Apply the Migration</li> </ol> <p>This step actually updates the database with the migration.</p> <p><code>uv run python manage.py migrate</code></p> <ol> <li>Confirm the Migration Worked</li> </ol> <p>You can use your favorite database IDE to check that the migration worked, or you can use the command line by typing:</p> <p><code>uv run python manage.py dbshell</code></p> <p>Then:</p> <p><code>\\dt</code> to list the tables</p> <ol> <li>Commit Your Migration Files</li> </ol> <p>The migration file created by this process should be committed to GitHub! These files work like a running ledger for how the database has changed over time. Without these files, other users won't be able to apply or build upon database changes.</p>"},{"location":"03-schema-updates/#other-notes","title":"Other Notes","text":"<p>You can name a migration, for example:</p> <p><code>uv run python manage.py makemigrations core --name add_status_field</code></p>"},{"location":"04-signing_up_and_logging_in/","title":"Signing Up and Logging In","text":""},{"location":"04-signing_up_and_logging_in/#to-start-the-server","title":"To start the server:","text":"<p><code>uv run python manage.py runserver</code></p>"},{"location":"04-signing_up_and_logging_in/#currently-in-progress","title":"Currently In Progress:","text":"<p>We are currently awaiting our Twilio campaign to be approved in order to send text messages without running into spam filters. In the meantime, phone authentication for the app has been disabled.</p>"},{"location":"04-signing_up_and_logging_in/#signing-up","title":"Signing Up","text":"<p>To sign up, you will be asked to provide two things:</p> <ul> <li>Email Address</li> <li>Password</li> <li>Phone Number (Optional)</li> <li>Full Name (Optional)</li> </ul> <p>You will then be instructed to authorize your email address. Enter the authorization code sent to your email address. If you can't find it, check your spam folder.</p>"},{"location":"05-models/","title":"Postgres Tables","text":"<pre><code>erDiagram\n    USERS 1 to zero or more FAVORITES : has\n    FAVORITES zero or more optionally to 1 BILLS : marks\n    SPONSORS one or more optionally to one or more BILLS : introduces\n    BILLS 1 to zero or more ACTIONS : has\n    BILLS one or more to one or more TOPICS : has\n</code></pre>"},{"location":"05-models/#users","title":"Users","text":"<p>               Bases: <code>AbstractBaseUser</code>, <code>PermissionsMixin</code></p> A modification of the built-in Django user that <ul> <li>switches first_name &amp; last_name for username &amp; full_name</li> <li>keeps other admin-compliant options</li> </ul> Source code in <code>apps\\accounts\\models.py</code> <pre><code>class User(AbstractBaseUser, PermissionsMixin):\n    \"\"\"\n    A modification of the built-in Django user that:\n        - switches first_name &amp; last_name for username &amp; full_name\n        - keeps other admin-compliant options\n    \"\"\"\n\n    username_validator = UnicodeUsernameValidator()\n\n    email = models.EmailField(_(\"email address\"), unique=EMAIL_REQUIRED, default=\"\")\n    phone = models.CharField(\n        _(\"phone number\"),\n        max_length=20,\n        blank=True,\n        unique=True,\n    )\n\n    phone_verified = models.BooleanField(\n        _(\"phone verified\"),\n        default=False,\n        help_text=_(\"Designates whether this user's phone number is verified.\"),\n    )\n\n    username = models.CharField(\n        max_length=255,\n        unique=True,\n        validators=[username_validator] if USERNAME_REQUIRED else [],\n        default=\"\",\n    )\n    full_name = models.CharField(_(\"full name\"), max_length=150, blank=True)\n    is_staff = models.BooleanField(\n        _(\"staff status\"),\n        default=False,\n        help_text=_(\"Designates whether the user can log into this admin site.\"),\n    )\n    is_active = models.BooleanField(\n        _(\"active\"),\n        default=True,\n        help_text=_(\n            \"Designates whether this user should be treated as active. \"\n            \"Unselect this instead of deleting accounts.\"\n        ),\n    )\n\n    is_subscribed = models.BooleanField(\n        _(\"subscribed\"),\n        default=True,\n        help_text=_(\"Designates whether the user is subscribed to notifications.\"),\n    )\n\n    date_joined = models.DateTimeField(_(\"date joined\"), default=timezone.now)\n\n    objects = OkUserManager()\n\n    EMAIL_FIELD = \"email\"\n    USERNAME_FIELD = \"username\" if USERNAME_REQUIRED else \"email\"\n    REQUIRED_FIELDS = []\n\n    class Meta:\n        verbose_name = _(\"user\")\n        verbose_name_plural = _(\"users\")\n\n    def clean(self):\n        super().clean()\n        self.email = self.__class__.objects.normalize_email(self.email)\n\n    def save(self, *args, **kwargs):\n        if EMAIL_REQUIRED and not self.username:\n            self.username = self.email\n        super().save(*args, **kwargs)\n\n    def get_short_name(self):\n        return self.username\n\n    def get_full_name(self):\n        return self.full_name\n\n    def email_user(self, subject, message, from_email=None, **kwargs):\n        send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"05-models/#has-connections-from","title":"Has Connections From:","text":"<ul> <li>Favorites</li> </ul> Name Type Description id PrimaryKey, bigint, unique Internal user id password Varchar Hashed user password email Varchar User email address username Varchar User's username phone Varchar User's phone number"},{"location":"05-models/#actions","title":"Actions","text":"<p>               Bases: <code>Model</code></p> <p>Stores each distinct action taken on a bill, e.g., (\"First Reading\"). Represented by a one-to-many relationship between bill and actions.</p> <p>This table is queried by frontend views that show bill information, such as most recent action. Additionally, it will be queried by the notification system, which updates users about favorited bills that have had a significant action associated with them in the past 24 hours.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class ActionsTable(models.Model):\n    \"\"\"\n    Stores each distinct action taken on a bill, e.g., (\"First Reading\").\n    Represented by a one-to-many relationship between bill and actions.\n\n    This table is queried by frontend views that show bill information, such\n    as most recent action. Additionally, it will be queried by the\n    notification system, which updates users about favorited bills that have\n    had a significant action associated with them in the past 24 hours.\n    \"\"\"\n\n    action_id = models.CharField(unique=True, primary_key=True, db_column=\"action_id\")\n    bill_id = models.ForeignKey(\"BillsTable\", on_delete=models.CASCADE, db_column=\"bill_id\")\n    description = models.CharField()\n    date = models.DateTimeField()\n    category = models.CharField(null=True)\n    chamber = models.CharField(null=True, default=None)\n\n    class Meta:\n        db_table = \"actions_table\"\n        unique_together = (\"action_id\", \"bill_id\")\n</code></pre>"},{"location":"05-models/#connects-to","title":"Connects to:","text":"<ul> <li>Bills (on bill_id ForeignKey)</li> </ul> Name Type Description action_id Varchar, PrimaryKey, unique Id of the action description Varchar Description of action, e.g. (\u201cFirst Reading\u201d) date Timestamp with time zone Date of action category varchar, nullable Category of action. Used to group actions into broader types for tracking bill status bill_id ForeignKey <code>bill_id</code> from the bills_table for the bill associated with this action"},{"location":"05-models/#bills","title":"Bills","text":"<p>               Bases: <code>Model</code></p> <p>Stores data for each bill.</p> <p>This table is queried by frontend views that show bill information, such as the search view, and individual bill pages.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class BillsTable(models.Model):\n    \"\"\"\n    Stores data for each bill.\n\n    This table is queried by frontend views that show bill information, such\n    as the search view, and individual bill pages.\n    \"\"\"\n\n    bill_id = models.CharField(unique=True, primary_key=True)\n    number = models.CharField()\n    title = models.CharField()\n    state = models.CharField()\n    session = models.CharField()\n    summary = models.CharField()\n    status = models.CharField()\n\n    class Meta:\n        db_table = \"bills_table\"\n</code></pre>"},{"location":"05-models/#has-connections-from_1","title":"Has Connections From:","text":"<ul> <li>Actions</li> <li>Favorites</li> <li>Sponsors</li> <li>Topics</li> </ul> Name Type Description bill_id Varchar, PrimaryKey, unique Id of the bill number Varchar Bill number used by legislature title Varchar Official title of the bill summary Varchar Bill summary as sourced from OpenStates API status Varchar The latest action taken on the bill"},{"location":"05-models/#favorites","title":"Favorites","text":"<p>               Bases: <code>Model</code></p> <p>Stores data for user favorites of bills. Represents a many-to-many relationship: one user can like many bills, one bill can be associated with many users.</p> <p>This table will be queried by frontend views that show users which bills they have favorited. Additionally, this table will be used for the automatic notification system that notifies users about updates from bills they have favorited.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class FavoritesTable(models.Model):\n    \"\"\"\n    Stores data for user favorites of bills. Represents a many-to-many\n    relationship: one user can like many bills, one bill can be associated\n    with many users.\n\n    This table will be queried by frontend views that show users which bills\n    they have favorited. Additionally, this table will be used for the\n    automatic notification system that notifies users about updates from\n    bills they have favorited.\n    \"\"\"\n\n    user_id = models.ForeignKey(User, on_delete=models.CASCADE, db_column=\"user_id\")\n    bill_id = models.ForeignKey(\"BillsTable\", on_delete=models.CASCADE, db_column=\"bill_id\")\n\n    class Meta:\n        db_table = \"favorites_table\"\n        unique_together = (\"user_id\", \"bill_id\")\n</code></pre>"},{"location":"05-models/#connects-to_1","title":"Connects to:","text":"<ul> <li>Bills (on bill_id ForeignKey)</li> <li>Users (on user_id ForeignKey)</li> </ul> Name Type Description id Bigint, PrimaryKey Internal ID for a favorite bill_id Varchar, ForeignKey <code>bill_id</code> from the bills_table for the bill favorited user_id Varchar, ForeignKey <code>user_id</code> from the users table for the user favoriting the bill"},{"location":"05-models/#sponsors","title":"Sponsors","text":"<p>               Bases: <code>Model</code></p> <p>Stores data for sponsors of bills. Represents a one-to-many relationship: one bill may have many sponsors.</p> <p>This table is queried by frontend views that show bill information, including sponsor information.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class SponsorsTable(models.Model):\n    \"\"\"\n    Stores data for sponsors of bills. Represents a one-to-many relationship:\n    one bill may have many sponsors.\n\n    This table is queried by frontend views that show bill information,\n    including sponsor information.\n    \"\"\"\n\n    id = models.CharField(unique=True, primary_key=True)\n    bill_id = models.ForeignKey(\"BillsTable\", on_delete=models.CASCADE, db_column=\"bill_id\")\n    sponsor_id = models.CharField(null=True)\n    sponsor_name = models.CharField()\n    position = models.CharField(null=True)\n    party = models.CharField(null=True)\n\n    class Meta:\n        db_table = \"sponsors_table\"\n</code></pre>"},{"location":"05-models/#connects-to_2","title":"Connects to:","text":"<ul> <li>Bills (on bill_id ForeignKey)</li> </ul> Name Type Description id Varchar, PrimaryKey, unique Internal id of the sponsor. Separate from sponsor_id as sponsor_id comes from OpenStates and may be null sponsor_id Varchar sponsor_id from OpenStates sponsor_name Varchar Name of the bill sponsor bill_id Varchar, ForeignKey <code>bill_id</code> from the bills table, the bill that the sponsor has sponsored position Varchar, nullable The position: (e.g., Member of the State House, Member of the State Senate) that the sponsor occupies party Varchar, nullable The political party of the sponsor"},{"location":"05-models/#topics","title":"Topics","text":"<p>               Bases: <code>Model</code></p> <p>Stores data for topics associated with each bill. Represents a many-to-many relationship: one bill may have many topics, one topic may have many bills associated with it.</p> <p>This table is queried by frontend views that show bill information, including topic information.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class TopicsTable(models.Model):\n    \"\"\"\n    Stores data for topics associated with each bill. Represents a many-to-many relationship:\n    one bill may have many topics, one topic may have many bills associated with it.\n\n    This table is queried by frontend views that show bill information,\n    including topic information.\n    \"\"\"\n\n    bill_id = models.ForeignKey(\"BillsTable\", on_delete=models.CASCADE, db_column=\"bill_id\")\n    topic = models.CharField()\n\n    class Meta:\n        db_table = \"topics_table\"\n</code></pre>"},{"location":"05-models/#connects-to_3","title":"Connects to:","text":"<ul> <li>Bills (on bill_id ForeignKey)</li> </ul> Name Type Description id Bigint, PrimaryKey ID of the topic topic Varchar Topic name bill_id Varchar, ForeignKey <code>bill_id</code> from the bills table, the bill the topic is associated with"},{"location":"05-models/#most-recent-upload","title":"Most Recent Upload","text":"<p>               Bases: <code>Model</code></p> <p>A table that stores the most recent bill upload date. Used to determine whether or not a notification email should be sent, or if there was an error uploading the bills.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class MostRecentUpload(models.Model):\n    \"\"\"\n    A table that stores the most recent bill upload date.\n    Used to determine whether or not a notification email should be sent, or\n    if there was an error uploading the bills.\n    \"\"\"\n\n    last_upload_date = models.DateField()\n\n    class Meta:\n        db_table = \"most_recent_upload\"\n</code></pre>"},{"location":"05-models/#connects-to_4","title":"Connects To:","text":"<p>None</p> Name Type Description id Bigint, PrimaryKey ID of the upload last_upload_date Date Date of the last successful bill upload"},{"location":"05-models/#user-notification-queue","title":"User Notification Queue","text":"<p>               Bases: <code>Model</code></p> <p>A table to store user notifications.</p> Source code in <code>apps\\core\\models.py</code> <pre><code>class UserNotificationQueue(models.Model):\n    \"\"\"\n    A table to store user notifications.\n    \"\"\"\n\n    user_id = models.OneToOneField(User, on_delete=models.CASCADE, db_column=\"user_id\")\n    number_of_notifications = models.IntegerField()\n    bills_to_notify = models.JSONField()\n    is_notified = models.BooleanField(default=False)\n\n    class Meta:\n        db_table = \"user_notification_queue\"\n</code></pre>"},{"location":"05-models/#connects-to_5","title":"Connects To:","text":"<ul> <li>Users (on user_id)</li> </ul> Name Type Description id Bigint, PrimaryKey ID of the queue entry number_of_notifications Int Number of notifications for a user on a given day bills_to_notify Array A list of the bill ids that the user needs to be updated on is_notified Boolean Whether or not a notification email has been sent to the user user_id ForeignKey The user_id of the user to be notified"},{"location":"endpoints/auth/","title":"Authorization Endpoints","text":""},{"location":"endpoints/auth/#accountssignup","title":"/accounts/signup/","text":"<p>Parameters:</p> <ul> <li>email: <code>str</code></li> <li>phone number: <code>str</code></li> <li>password: <code>str</code></li> </ul> <p>Response: HTML sign-up page, success message upon successful registration, failure message upon failed registration</p>"},{"location":"endpoints/auth/#accountsconfirm-email","title":"/accounts/confirm-email/","text":"<p>Parameters:</p> <ul> <li>code: <code>str</code> a confirmation code sent to the user's email to confirm signup</li> </ul> <p>Response: HTML confirmation page</p>"},{"location":"endpoints/auth/#accountslogin","title":"/accounts/login/","text":"<p>Parameters:</p> <ul> <li>email: <code>str</code></li> <li>remember_me: <code>bool</code></li> </ul> <p>Response: HTML login page, redirect to confirmation page, failure message upon failed login.</p>"},{"location":"endpoints/auth/#accountslogincodeconfirm","title":"/accounts/login/code/confirm/","text":"<p>Parameters:</p> <ul> <li>code: <code>str</code></li> </ul> <p>Response: Redirect to home page <code>/</code> after successful confirmation, failure message upon failed confirmation.</p>"},{"location":"endpoints/auth/#accountslogout","title":"/accounts/logout","text":"<p>Parameters:</p> <p>Response: Redirect to home page <code>/</code> after successful logout.</p>"},{"location":"endpoints/auth/#accountspasswordreset","title":"/accounts/password/reset/","text":"<p>Parameters:</p> <ul> <li>email: <code>str</code></li> </ul> <p>Response: HTML password reset page, sends an email to the user upon form submit.</p>"},{"location":"endpoints/auth/#accountsdelete_account","title":"/accounts/delete_account","text":"<p>Parameters:</p> <ul> <li>password: <code>str</code></li> </ul> <p>Response: Redirect to goodbye page on success, error message on failure</p>"},{"location":"endpoints/auth/#accountsaccount_goodbye","title":"/accounts/account_goodbye","text":"<p>Response: HTML goodbye page</p>"},{"location":"endpoints/core/","title":"Core App Endpoints","text":""},{"location":"endpoints/core/#_1","title":"/","text":"<p>Render the home page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>An HTTP request object:</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>The rendered HTML home page, redirect to <code>/search/</code> page upon search submission.</p> Source code in <code>apps\\core\\views.py</code> <pre><code>def home(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"\n    Render the home page.\n\n    Args:\n        request (HttpRequest): An HTTP request object:\n\n    Returns:\n        HttpResponse:\n            The rendered HTML home page, redirect to `/search/` page\n            upon search submission.\n    \"\"\"\n    return render(request, \"home.html\")\n</code></pre>"},{"location":"endpoints/core/#searchqueryquery","title":"/search?query='{query}'","text":"<p>Handle search requests.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>An HTTP request object.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>The rendered search results page listing all bills matching a search query.</p> <code>Results</code> <code>HttpResponse</code> <p>An array of JSON objects from the Postgres database, containing bill information about searched bills. The fields correspond to the columns in the database's bills table:</p> <ul> <li>bill_id: Unique identifier for the bill</li> <li>number: Bill number</li> <li>title: Bill title</li> <li>summary: Bill summary</li> <li>status: Current status for the bill</li> <li>topics: Pre-defined topic classification(s) as identified from keyword match</li> <li>favorite:      Whether the authenticated user has requested to be notified about the bill</li> <li>state: State where the bill is being introduced</li> <li>session: Legislative session</li> </ul> <p>Example:</p> <p><code>http://127.0.0.1:8000/search/?query=environment</code></p> <pre><code>[{\n    \"bill_id\": '123',\n    \"number\": \"HB-001\",\n    \"title\": \"Test Bill\",\n    \"summary\": \"Tests a bill.\",\n    \"status\": \"Submitted\",\n    \"topics\": ['Environment', 'Education'],\n    \"sponsors\": ['Rep. Patel', 'Rep. Wilks'],\n    \"state\": \"IL\",\n    \"session\": \"116th\",\n}]\n</code></pre> Source code in <code>apps\\core\\views.py</code> <pre><code>def search(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"\n    Handle search requests.\n\n    Args:\n        request (HttpRequest): An HTTP request object.\n\n    Returns:\n        HttpResponse: The rendered search results page listing all bills matching a search query.\n        Results:\n            An array of JSON objects from the Postgres database, containing\n            bill information about searched bills.\n            The fields correspond to the columns in the database's bills table:\n\n            - bill_id: Unique identifier for the bill\n            - number: Bill number\n            - title: Bill title\n            - summary: Bill summary\n            - status: Current status for the bill\n            - topics: Pre-defined topic classification(s) as identified from keyword match\n            - favorite: \n                Whether the authenticated user has requested to be notified about the bill\n            - state: State where the bill is being introduced\n            - session: Legislative session\n\n    Example:\n\n    `http://127.0.0.1:8000/search/?query=environment`\n\n    ```json\n    [{\n        \"bill_id\": '123',\n        \"number\": \"HB-001\",\n        \"title\": \"Test Bill\",\n        \"summary\": \"Tests a bill.\",\n        \"status\": \"Submitted\",\n        \"topics\": ['Environment', 'Education'],\n        \"sponsors\": ['Rep. Patel', 'Rep. Wilks'],\n        \"state\": \"IL\",\n        \"session\": \"116th\",\n    }]\n    ```\n    \"\"\"\n\n    query = request.GET.get(\"query\", \"\")\n    state = request.GET.get(\"state\", None)\n    # topic = request.GET.get(\"topic\", None)\n\n    results = []\n\n    bill_number_pattern = r\"^(HB|HR|SJR|HJR|HJRCA|SR|SJRCA|SB|AM|EO|JSR)\\s*\\d+\"\n\n    # If the user has searched by bill number, only search the number field\n    # This is to avoid returning unrelated results for bill numbers\n    if re.fullmatch(bill_number_pattern, query.strip().upper()):\n        search_vector = SearchVector(\"number\", config=\"english\")\n\n    else:\n        search_vector = SearchVector(\"title\", \"summary\", \"number\", config=\"english\")\n\n    search_query = SearchQuery(query, config=\"english\")\n    results = BillsTable.objects.annotate(search=search_vector).filter(search=search_query)\n\n    if state:\n        results = results.filter(state=state)\n\n    results = results.annotate(rank=SearchRank(search_vector, search_query)).order_by(\"-rank\")\n    results = results.annotate(topics=ArrayAgg(\"topicstable__topic\", distinct=True))\n\n    if request.user.is_authenticated:\n        user_id = request.user.id\n\n        favorites_query = FavoritesTable.objects.filter(\n            user_id=user_id, bill_id=OuterRef(\"bill_id\")\n        )\n\n        results = results.annotate(favorite=Exists(favorites_query))\n\n    # Paginate the results to avoid overwhelming the frontend\n    paginator = Paginator(results, 10)\n    page_number = request.GET.get(\"page\")\n    page_obj = paginator.get_page(page_number)\n\n    return render(\n        request,\n        \"search.html\",\n        {\n            \"query\": query,\n            \"results\": page_obj,\n        },\n    )\n</code></pre>"},{"location":"endpoints/core/#billbill_number","title":"/bill/{bill_number}","text":"<p>Return detailed bill data using either the bill ID or a combination of     state, year, and bill number.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>An HTTP request object.</p> required <code>bill_id</code> <code>str</code> <p>The unique identifier for the bill     (e.g., ocd-bill/12bcc69d-cfa4-4021-974a-5f562297ea34).</p> <code>None</code> <code>state</code> <code>str</code> <p>The U.S. state abbreviation or name     (e.g., 'il' for Illinois).</p> <code>None</code> <code>year</code> <code>str</code> <p>The legislative session year     (e.g., '2025').</p> required <code>bill_number</code> <code>str</code> <p>The official bill number     (e.g., 'HB1234').</p> <code>None</code> <code>At</code> <code>least one of the following must be provided</code> required <code>-</code> <code>All of</code> <p><code>state</code>, <code>year</code>, and <code>bill_number</code>.</p> required <code>Returns</code> required <code>HttpResponse</code> <p>A Django context variable with the data from the query.</p> required <code>Results</code> <p>contains the following columns from database's table:     bill_id: The unique identifier for the bill     number: The bill number     title: The bill title     summary: The bill summary     status: The bill status         includes: current and all previous statuses                   dates: date of change of status                   description: a description of the change of status     topics: A tagged topic from the summary     sponsors: any registered sponsor for the bill         includes: name of sponsor                   party: the political party they represent                   position: their role in the legislature                   sponsor_id: unique number for sponsor</p> required Source code in <code>apps\\core\\views.py</code> <pre><code>def bill_page(\n    request: HttpRequest,\n    bill_id: str = None,\n    state: str = None,\n    session: str = None,\n    bill_number: str = None,\n) -&gt; HttpResponse:\n    \"\"\"\n    Return detailed bill data using either the bill ID or a combination of\n        state, year, and bill number.\n\n\n    Args:\n        request (HttpRequest): An HTTP request object.\n        bill_id (str): The unique identifier for the bill\n                (e.g., ocd-bill/12bcc69d-cfa4-4021-974a-5f562297ea34).\n        state (str): The U.S. state abbreviation or name\n                (e.g., 'il' for Illinois).\n        year (str): The legislative session year\n                (e.g., '2025').\n        bill_number (str): The official bill number\n                (e.g., 'HB1234').\n\n        At least one of the following must be provided:\n        - `bill_id`, or\n        - All of: `state`, `year`, and `bill_number`.\n\n        Returns:\n        HttpResponse: A Django context variable with the data from the query.\n        Results: contains the following columns from database's table:\n                bill_id: The unique identifier for the bill\n                number: The bill number\n                title: The bill title\n                summary: The bill summary\n                status: The bill status\n                    includes: current and all previous statuses\n                              dates: date of change of status\n                              description: a description of the change of status\n                topics: A tagged topic from the summary\n                sponsors: any registered sponsor for the bill\n                    includes: name of sponsor\n                              party: the political party they represent\n                              position: their role in the legislature\n                              sponsor_id: unique number for sponsor\n    \"\"\"\n    if bill_id:\n        try:\n            bill = BillsTable.objects.get(bill_id=bill_id)\n        except BillsTable.DoesNotExist as err:\n            raise Http404(\"Bill not found with given ID.\") from err\n\n        url_bill_number = bill_number_for_url(bill.number)\n        return redirect(\n            \"bill_by_info\",\n            state=bill.state.lower(),\n            session=bill.session,\n            bill_number=url_bill_number,\n        )\n\n    elif state and session and bill_number:\n        try:\n            normalized_number = normalize_bill_number(bill_number)\n            bill = BillsTable.objects.get(\n                state=state.capitalize(),\n                session=session,\n                number=normalized_number,\n            )\n        except BillsTable.DoesNotExist as err:\n            raise Http404(\"Bill not found with given state/year/number.\") from err\n    else:\n        raise Http404(\"Insufficient information to find bill.\")\n\n    data = {\n        \"bill_id\": bill.bill_id,\n        \"number\": bill.number,\n        \"title\": bill.title,\n        \"summary\": bill.summary,\n        \"sponsors\": [\n            {\n                \"sponsor_id\": s.sponsor_id,\n                \"sponsor_name\": s.sponsor_name,\n                \"party\": s.party,\n                \"position\": s.position,\n            }\n            for s in bill.sponsorstable_set.exclude(sponsor_id=None)\n        ],\n        \"topics\": [{\"topic\": t.topic} for t in bill.topicstable_set.all()],\n        \"status\": [\n            {\n                \"date\": a.date,\n                \"status\": a.category,\n                \"status_desc\": a.description,\n            }\n            for a in bill.actionstable_set.exclude(category=None).order_by(\"date\")\n        ],\n    }\n\n    return render(request, \"bill_page.html\", {\"bill_data\": data})\n</code></pre>"},{"location":"endpoints/core/#favorites","title":"/favorites/","text":"<p>A list of favorited bills for the logged in user.</p> <p>Parameters:</p> <ul> <li>None</li> </ul> <p>Response:</p> <ul> <li> <p>HTML for favorited bills if the user is logged in, otherwise a message directing the user to log in at the <code>/login/</code> end point</p> </li> <li> <p>An array of JSON objects from the Postgres database, containing bill information about favorited bills:</p> </li> </ul> <pre><code>[\n  {\n    \"bill_id\": \"123\",\n    \"number\": \"HB-001\",\n    \"title\": \"Test Bill\",\n    \"summary\": \"Tests a bill.\",\n    \"status\": \"Submitted\",\n    \"topics\": [\"Environment\", \"Education\"],\n    \"sponsors\": [\"Rep. Patel\", \"Rep. Wilks\"]\n  }\n]\n</code></pre>"},{"location":"endpoints/core/#privacy_policy","title":"/privacy_policy/","text":"<p>Render the privacy policy page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>An HTTP request object.</p> required <p>Returns:     HttpResponse: The rendered HTML privacy policy page.</p> Source code in <code>apps\\core\\views.py</code> <pre><code>def privacy_policy(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"\n    Render the privacy policy page.\n\n    Args:\n        request (HttpRequest): An HTTP request object.\n    Returns:\n        HttpResponse: The rendered HTML privacy policy page.\n    \"\"\"\n    return render(request, \"privacy_policy.html\")\n</code></pre>"}]}